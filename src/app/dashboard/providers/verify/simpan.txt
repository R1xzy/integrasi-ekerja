"use client";

import { useState } from "react";
import { ChevronLeft, ChevronRight, X } from "lucide-react";

// Definisikan tipe data untuk Provider dan Modal agar lebih jelas
interface Provider {
  id: number;
  name: string;
  email: string;
  ktpUrl: string;
  certificateUrl: string;
  status: 'pending' | 'approved' | 'rejected';
}

type ModalState = 
  | { type: 'document'; title: string; url: string; }
  | { type: 'approve'; provider: Provider; }
  | { type: 'reject'; provider: Provider; }
  | null;

// Mock data dipindahkan ke luar agar tidak dibuat ulang setiap render
const initialProviders: Provider[] = [
  {
    id: 1,
    name: "Andi Prasetyo",
    email: "andi@mail.com",
    ktpUrl: "https://placehold.co/600x400/EEE/31343C?text=Contoh+KTP",
    certificateUrl: "https://placehold.co/600x400/EEE/31343C?text=Contoh+Sertifikat",
    status: 'pending',
  },
  {
    id: 2,
    name: "Budi Santoso",
    email: "budi@mail.com",
    ktpUrl: "https://placehold.co/600x400/EEE/31343C?text=Contoh+KTP",
    certificateUrl: "https://placehold.co/600x400/EEE/31343C?text=Contoh+Sertifikat",
    status: 'approved',
  },
];

export default function VerifyProvidersPage() {
  // Semua state harus berada di dalam komponen
  const [providers, setProviders] = useState<Provider[]>(initialProviders);
  const [modalState, setModalState] = useState<ModalState>(null);
  const [rejectionReason, setRejectionReason] = useState("");

  const handleApprove = (providerId: number) => {
    // Logika untuk menyetujui provider (contoh: update state)
    setProviders(providers.map(p => 
      p.id === providerId ? { ...p, status: 'approved' } : p
    ));
    setModalState(null); // Tutup modal
  };
  
  const handleReject = (providerId: number) => {
    // Logika untuk menolak provider
    console.log(`Menolak provider ${providerId} dengan alasan: ${rejectionReason}`);
    setProviders(providers.map(p => 
      p.id === providerId ? { ...p, status: 'rejected' } : p
    ));
    setModalState(null); // Tutup modal
    setRejectionReason(""); // Reset alasan penolakan
  };

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-7xl mx-auto">
        <h1 className="text-2xl font-bold text-gray-800 mb-6">Verifikasi Penyedia</h1>

        {/* Filter & Search */}
        <div className="bg-white p-4 rounded-lg shadow flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-4">
          <input
            type="text"
            placeholder="Cari penyedia..."
            className="border border-gray-300 rounded px-4 py-2 w-full sm:w-64 focus:ring-2 focus:ring-blue-500"
          />
          <select className="border border-gray-300 rounded px-4 py-2 focus:ring-2 focus:ring-blue-500">
            <option>Semua Status</option>
            <option>Pending</option>
            <option>Disetujui</option>
            <option>Ditolak</option>
          </select>
        </div>

        {/* Table */}
        <div className="bg-white rounded-lg shadow overflow-x-auto">
          <table className="min-w-full table-auto text-sm text-left divide-y divide-gray-200">
            <thead className="bg-gray-100 text-gray-600 uppercase text-xs">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">#</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nama</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">KTP</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Sertifikat</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Aksi</th>
              </tr>
            </thead>
            <tbody className="text-gray-700 divide-y divide-gray-200">
              {providers.map((p, idx) => (
                <tr key={p.id} className="border-t hover:bg-gray-50">
                  <td className="px-6 py-4">{idx + 1}</td>
                  <td className="px-6 py-4 font-medium">{p.name}</td>
                  <td className="px-6 py-4">{p.email}</td>
                  <td className="px-6 py-4">
                    <button onClick={() => setModalState({ type: 'document', title: `KTP - ${p.name}`, url: p.ktpUrl })} className="text-blue-600 hover:underline">
                      Lihat
                    </button>
                  </td>
                  <td className="px-6 py-4">
                    <button onClick={() => setModalState({ type: 'document', title: `Sertifikat - ${p.name}`, url: p.certificateUrl })} className="text-blue-600 hover:underline">
                      Lihat
                    </button>
                  </td>
                  <td className="px-6 py-4">
                    {p.status === 'approved' && <span className="bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded-full">Disetujui</span>}
                    {p.status === 'rejected' && <span className="bg-red-100 text-red-800 text-xs font-medium px-2.5 py-0.5 rounded-full">Ditolak</span>}
                    {p.status === 'pending' && <span className="bg-yellow-100 text-yellow-800 text-xs font-medium px-2.5 py-0.5 rounded-full">Pending</span>}
                  </td>
                  <td className="px-6 py-4 text-center space-x-2">
                    {p.status === 'pending' ? (
                      <>
                        <button onClick={() => setModalState({ type: 'approve', provider: p })} className="bg-green-500 text-white px-3 py-1.5 rounded hover:bg-green-600 text-xs">Approve</button>
                        <button onClick={() => setModalState({ type: 'reject', provider: p })} className="bg-red-500 text-white px-3 py-1.5 rounded hover:bg-red-600 text-xs">Reject</button>
                      </>
                    ) : (
                      <span className="text-gray-400">-</span>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* Pagination */}
        <div className="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6 mt-6 rounded-lg shadow">
          <div className="flex-1 flex justify-between sm:hidden">
            <button className="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
              Previous
            </button>
            <button className="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
              Next
            </button>
          </div>
          <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
            <div>
              <p className="text-sm text-gray-700">
                Menampilkan <span className="font-medium">1</span> sampai{' '}
                <span className="font-medium">1</span> dari{' '}
                <span className="font-medium">2</span> hasil
              </p>
            </div>
            <div>
              <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px">
                <button className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                  Previous
                </button>
                <button className="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50">
                  1
                </button>
                <button className="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50">
                  2
                </button>
                <button className="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50">
                  3
                </button>
                <button className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                  Next
                </button>
              </nav>
            </div>
          </div>
        </div>
      </div>

      {/* --- MODALS --- */}
      {/* Modal untuk Dokumen */}
      {modalState?.type === 'document' && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
          <div className="bg-white rounded-lg max-w-2xl w-full overflow-hidden shadow">
            <div className="flex justify-between items-center px-4 py-3 border-b">
              <h2 className="text-lg font-semibold text-gray-800">{modalState.title}</h2>
              <button onClick={() => setModalState(null)} className="text-gray-500 hover:text-gray-800">
                <X className="w-5 h-5" />
              </button>
            </div>
            <img src={modalState.url} alt={modalState.title} className="w-full h-auto" />
          </div>
        </div>
      )}

      {/* Modal untuk Approve */}
      {modalState?.type === 'approve' && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
          <div className="bg-white p-6 rounded-lg shadow max-w-sm w-full">
            <h3 className="text-lg font-semibold text-gray-900 mb-2">Konfirmasi Approve</h3>
            <p className="text-sm text-gray-600 mb-4">Yakin ingin menyetujui penyedia **{modalState.provider.name}**?</p>
            <div className="flex justify-end space-x-2">
              <button onClick={() => setModalState(null)} className="px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300">Batal</button>
              <button onClick={() => handleApprove(modalState.provider.id)} className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700">Approve</button>
            </div>
          </div>
        </div>
      )}

      {/* Modal untuk Reject */}
      {modalState?.type === 'reject' && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
          <div className="bg-white p-6 rounded-lg shadow max-w-sm w-full">
            <h3 className="text-lg font-semibold text-gray-900 mb-2">Tolak Penyedia: {modalState.provider.name}</h3>
            <textarea 
              rows={3} 
              className="w-full p-2 border rounded mb-4 focus:ring-2 focus:ring-blue-500" 
              placeholder="Alasan penolakan..."
              value={rejectionReason}
              onChange={(e) => setRejectionReason(e.target.value)}
            ></textarea>
            <div className="flex justify-end space-x-2">
              <button onClick={() => setModalState(null)} className="px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300">Batal</button>
              <button onClick={() => handleReject(modalState.provider.id)} className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700">Tolak</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}